// Selectors
let start = $('#start'); // Splash page
let editor = $('#editor'); // Editor page
let filters = $('#filters'); // Filter container
let filter_template = $('#base-filter > div');
let blank_filter = $('#blank div');
let input = document.createElement('input');

// Constants
const new_filter = true;
const existing_filter = false;
const editor_layout = [
    {slot: 'helm', filters: {},},
    {slot: 'main_hand', filters: {},},
    {},

    {slot: 'chest', filters: {},},
    {slot: 'off_hand', filters: {},},
    {slot: 'amulet', filters: {},},

    {slot: 'gloves', filters: {},},
    {},
    {slot: 'ring', filters: {},},

    {slot: 'pants', filters: {},},
    {slot: 'left_hand', filters: {},},
    {slot: 'other_ring', filters: {},},

    {slot: 'boots', filters: {},},
    {slot: 'right_hand', filters: {},},
];
const implicit_affixes = {
    'boots': [
        'evade_grants_movement_speed_for_second',
        'attacks_reduce_evades_cooldown_by_seconds',
        'maximum_evade_charges',
    ],
    // 'Inherent' in D4LF
    // https://d4builds.gg/database/gear-affixes/
}
const affix_abbreviatons = {
    'evade_grants_movement_speed_for_second': 'evade gives speed',
    'attacks_reduce_evades_cooldown_by_seconds': 'attacks reduce evade cd',
    'maximum_evade_charges': 'max evades',
    'cooldown_reduction': 'cdr',
    'resistance_to_all_elements': 'resist all',
    // These affixes are handled dynamically:
    // lucky_hit_*
    // chance_for_*_to_cast_twice/chance_for_a_second_*_when_cast
    // resource_generation_while_*
    // critical_strike_chance_against_*
    // (and any over >40 char are cut off and <abbr>ed)
}
const original_editor = editor.clone();
const version = '0.0.0(season5)';
const supported_d4lf = 'v5.7.3';
const yaml_header_comment = ''
    + '# Generated by D4LF-editor version ' + version + '\n'
    + '# For D4LF version ' + supported_d4lf + '\n' + '\n';
const comparison = {
    'larger': '&#10095;',
    'smaller': '&#10094;',
};

$('.version').text(version);
$('.supported-d4lf').text(supported_d4lf);

// Working data
let editor_data = editor_layout; // Editor working data
let filter = {}; // Loaded filter data
let file = null; // Uploaded file
let reader = new FileReader(); // File reader

////////////////////////////////////////////////////////////////////////////////////

// Editor data

// List of all affixes
$.getJSON(
    'https://raw.githubusercontent.com/aeon0/d4lf/main/assets/lang/enUS/affixes.json',
    function (data) {
        $.each(data, function (key, value) {
            $('.affix-list').append(
                '<option data-key="' + key + '" data-value="' + value + '">' +
                value +
                '</option>'
            );
        });
    }
);

// List of just weapons
$.getJSON(
    'https://raw.githubusercontent.com/aeon0/d4lf/main/assets/lang/enUS/item_types.json',
    function (data) {
        $.each(data, function (key, value) {
            let key_check = key.toLowerCase();
            if (
                key_check.includes('axe')
                || key_check.includes('bow')
                || key_check.includes('dagger')
                || key_check.includes('focus')
                || key_check.includes('mace')
                || key_check.includes('totem')
                || key_check.includes('polearm')
                || key_check.includes('scythe')
                || key_check.includes('shield')
                || key_check.includes('staff')
                || key_check.includes('sword')
                || key_check.includes('wand')
            ) {
                $('.item-list').append(
                    '<option data-key="' + key + '" data-value="' + value + '">' +
                    capitalize(value) +
                    '</option>'
                );
            }
        });
    }
);

// List of all uniques
$.getJSON(
    'https://raw.githubusercontent.com/aeon0/d4lf/main/assets/lang/enUS/uniques.json',
    function (data) {
        $.each(data, function (key, value) {
            // Filter out some of the dud values
            if (key.toString().includes('(')
                || key.toString().includes('[')
                || key.toString().includes('boost')
                || value['desc'].toLowerCase().includes('test item')
                || value['desc'].toLowerCase().includes('tbd')) {
                return;
            }

            $('.unique-list').append(
                '<option data-key="' + key + '" data-value="' + value['desc'] + '">' +
                capitalize(key) +
                '</option>'
            );
        });
    }
);

////////////////////////////////////////////////////////////////////////////////////

// Editor utilities

// https://stackoverflow.com/a/1026087/1843510
function capitalize(string) {
    string = string.replace(/_/g, ' ');
    return string.charAt(0).toUpperCase() + string.slice(1);
}

// To get to the editor page, while loading data or just from scratch
function to_editor(filter_selection) {
    // Fail out
    if (filter_selection !== new_filter
        && filter_selection !== existing_filter) {
        return;
    }

    // Open a file dialog to choose a filter
    if (filter_selection === existing_filter) {
        // The .yaml file dialog
        input.type = 'file';
        input.accept = '.yaml';
        input.click();
        // Triggers input.onchange below, then reader.onload
    } else {
        show_editor();
    }
}

// Load the given filter file
input.onchange = e => {
    file = e.target.files[0];
    reader.readAsText(file, 'UTF-8');
}

// Parse the given filter
reader.onload = readerEvent => {
    let content = readerEvent.target.result;
    try {
        // Load the filter
        // noinspection JSCheckFunctionSignatures
        filter = jsyaml.load(content);
        console.debug(filter);

        // Save the filter
        editor_data = editor_layout;
        // Show the editor
        show_editor();
    } catch (e) {
        console.debug(content);
        console.debug(filter);
        console.error(e);
    }
}

// Actually build and show the editor page
function show_editor() {
    // Clear the page
    start.hide();

    // Show the editor
    $('body').css('maxWidth', '70em');
    editor.show();
    // Build the editor
    build_editor();
}

// Build the editor HTML from template code (#base-filter)
function build_editor() {
    editor.html(original_editor.html());

    // Iterate over equipment slots
    editor_data.forEach(function (layout_item) {
        // Fill blank slots
        if (jQuery.isEmptyObject(layout_item)) {
            (blank_filter.clone()).insertBefore('#controls');
            return;
        }

        // Build the editor slots
        // Copy the template
        let new_filter = filter_template.clone();
        // Fill the ID into the template
        new_filter.attr('id', layout_item.slot);
        new_filter.find('u').text(capitalize(layout_item.slot));

        // Show Item-Type selector for weapons
        if (layout_item.slot.includes('hand')) {
            new_filter.find('.select-item-type').show();
        }

        // Place the editor slot
        new_filter.insertBefore('#controls');
    })
}

// Return to the home page
function to_home() {
    filter = {};
    editor.html(original_editor.html());

    start.show();
    editor.hide();
    $('body').css('maxWidth', '38em');
}

////////////////////////////////////////////////////////////////////////////////////

// Editor Use

// Alternate the comparison operator for an aspect or affix
function change_comparison(element) {
    let current_comparison = element.data('current');
    if (current_comparison === 'larger') {
        element.data('current', 'smaller');
        element.html(comparison['smaller']);
    } else {
        element.data('current', 'larger');
        element.html(comparison['larger']);
    }
}

// Show both Item-Type and Unique selectors without values, with values: only
// show one or the other
function toggle_unique_or_item(element) {
    let value = element.children('option:selected').val();

    // Show both
    if (value === '') {
        $('.select-item-type').fadeIn("slow");
        $('.unique-selection').fadeIn("slow");
    }
    // Hide the other
    else {
        let parent_class = element.parent().attr('class');

        if (parent_class === 'select-item-type') {
            element.parent().parent().find('.unique-selection').hide();
        } else {
            element.parent().parent().find('.select-item-type').hide();
        }
    }
}

// Show the Unique sub-option to control the Unique's aspect only when a Unique
// is selected
function toggle_unique_aspect (element) {
    let value = element.children('option:selected').val();

    // Show the Unique sub-option for the Unique aspect
    if (value === '') {
        element.parent().parent().find('.unique-roll').hide();
    }
    // Hide the Unique sub-option
    else {
        element.parent().parent().find('.unique-roll').fadeIn("slow");
    }
}
